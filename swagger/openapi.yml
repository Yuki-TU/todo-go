openapi: 3.0.0
info:
  version: 1.0.0
  title: todoアプリのREST API
  description: >-
    TODOアプリのサンプルRESTAPI
servers:
  - url: 'http://{host}:8081/api/v1'
    description: go service api server endpoint application
    variables:
      host:
        default: localhost
        enum:
          - localhost
          - heroku.com
paths:
  ############################
  ## REGISTER AUTH ENDPOINT
  ############################
  /users:
    get:
      security:
        - bearerAuth: []
      tags:
        - User
      summary: ユーザ一覧取得
      description: |
        ユーザ一覧取得します。
        全権取得する。
      responses:
        '200':
          description: 取得成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 200
                  method:
                    type: string
                    example: "GET"
                  message:
                    type: string
                    example: "get user list successfully"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        ID:
                          type: integer
                          example: 1
                        Fullname:
                          type: string
                          example: "太郎"
                        Email:
                          type: string
                          example: "taro@gmail.com"
                        Active:
                          type: boolean
                          example: false
                        CreatedAt:
                          type: string
                          example: "2022-09-11T16:13:47+09:00"
                        UpdatedAt:
                          type: string
                          example: "2022-09-11T16:13:47+09:00"
                required:
                  - statusCode
                  - method
                  - message
        '401':
         $ref: '#/components/responses/401UnauthorizedError'
        '404':
          description: |
            ユーザ一覧が取得できませんでした。
            ユーザが存在しない。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
    post:
      tags:
        - User
      summary: 認証して登録
      description: register new users account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullname:
                  type: string
                  example: 藤本
                email:
                  type: string
                  format: email
                  example: fujimoto@gmail.com
                password:
                  type: string
                  format: password
                  example: qwerty123456789
              required:
                - fullname
                - email
                - password
      responses:
        '201':
          description: 登録成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 201
                  method:
                    type: string
                    example: "POST"
                  message:
                    type: string
                    example: "Register new account successfully"
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example:  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemF0aW9uIjp0cnVlLCJlbWFpbCI6ImZ1amltb3RvX2RhaWdvQGdtYWlsLmNvbSIsImV4cCI6MTY2MzI2NzExMCwiaWQiOjB9.ULejQB0o7qKu50I-tlrzCBeJIv4v1fpqP7GQOPwNPJ4"
                required:
                  - statusCode
                  - method
                  - message
        '400':
          description: |
            JSONデータの解析に失敗
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        '403':
          description: |
            ユーザー登録失敗
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 403
                  method:
                    type: string
                    example: "POST"
                  message:
                    type: string
                    example: "Register new account failed"
                  data:
                    type: object
                    example: null
                required:
                  - statusCode
                  - method
                  - message

        '404':
          description: |
            無効なURL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        '409':
          description: |
            メールがドレスが登録済み
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 409
                  method:
                    type: string
                    example: "POST"
                  message:
                    type: string
                    example: "Email already exist"
                  data:
                    type: object
                    example: null
                required:
                  - statusCode
                  - method
                  - message
  #################################
  #################################
  ## COMPONENTS AUTH TERITORY
  #################################
  #################################
  /login:
    post:
      tags:
        - login
      summary: ログイン認証
      description: |
        ログイン認証して、アクセストークンを発行
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: fujimoto@gmail.com
                password:
                  type: string
                  format: password
                  example: qwerty123456789
      responses:
        '201':
          description: 登録成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 201
                  method:
                    type: string
                    example: "POST"
                  message:
                    type: string
                    example: "Register new account successfully"
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example:  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemF0aW9uIjp0cnVlLCJlbWFpbCI6ImZ1amltb3RvX2RhaWdvQGdtYWlsLmNvbSIsImV4cCI6MTY2MzI2NzExMCwiaWQiOjB9.ULejQB0o7qKu50I-tlrzCBeJIv4v1fpqP7GQOPwNPJ4"
                required:
                  - statusCode
                  - method
                  - message
        '403':
          description: |
            パスワードが間違っている
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 403
                  method:
                    type: string
                    example: "POST"
                  message:
                    type: string
                    example: "Username or password is wrong"
                  data:
                    type: object
                    example: null
                required:
                  - statusCode
                  - method
                  - message
        '404':
          description: |
            アカウントが存在しない
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'

components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT 
  responses:
    401UnauthorizedError:
      description: |
        認証失敗
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int64
                example: "400"
              method:
                type: string
                example: "GET"
              message: 
                type: string
                example: "認証に失敗しました。"    
              data:
                type: object
                example: null
  schemas:
    400Error:
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          example: "400"
        method:
          type: string
          example: "GET"
        message: 
          type: string
          example: "無効なリクエストです。"
    404Error:
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          example: "404"
        method:
          type: string
          example: "GET"
        message: 
          type: string
          example: "無効なリクエストです。"
        data:
          type: object
          example: null
externalDocs:
  description: "Find more about Swagger"
  url: "http://swagger.io"
